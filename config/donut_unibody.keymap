#define ZMK_POINTING_DEFAULT_MOVE_VAL 1300  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        bootloader {
            bindings = <&bootloader>;
            key-positions = <32 33 34>;
        };

        bluetoothcombo {
            bindings = <&to 4>;
            key-positions = <35 36 37>;
        };
    };

    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 11 12 13 14 15 22 23 24 25 26 32 33 34 35 36 37 10>;
            require-prior-idle-ms = <150>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <32 33 34 35 36 37 5 6 7 8 9 16 17 18 19 20 21 27 28 29 30 31 35 36 37>;
            require-prior-idle-ms = <150>;
        };

        strg_dance: strg_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "STRG_DANCE";
            #binding-cells = <0>;
            bindings = <&kp LCTRL>, <&mo 5>;

            tapping-term-ms = <350>;
        };

        shift_dance: shift_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_DANCE";
            #binding-cells = <0>;
            bindings = <&kp RSHFT>, <&kp CAPSLOCK>;
        };

        hml2: hml2 {
            compatible = "zmk,behavior-hold-tap";
            label = "HML2";
            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <32 33 34 35 36 37 5 6 7 8 9 16 17 18 19 20 21 27 28 29 30 31 35 36 37>;
            require-prior-idle-ms = <150>;
            bindings = <&mo>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp X             &kp V            &kp L             &kp C        &kp W        &kp K         &kp H  &kp G      &kp F             &kp Q
&kp ESCAPE  &hml LEFT_GUI U   &hml LEFT_ALT I  &kp A             &kp E        &kp O        &kp S         &kp N  &kp R      &hmr RIGHT_ALT T  &hmr RIGHT_GUI D  &kp Z
            &kp LEFT_BRACKET  &kp SEMICOLON    &kp SINGLE_QUOTE  &kp P        &kp Y        &kp B         &kp M  &kp COMMA  &kp PERIOD        &kp J
                                               &kp BACKSPACE     &strg_dance  &kp SPACE    &shift_dance  &sl 1  &kp ENTER
            >;
        };

        symbol_layer {
            bindings = <
            &kp RIGHT_BRACKET  &kp LS(SLASH)  &kp RA(N8)    &kp RA(N9)    &kp GRAVE        &kp LS(NUMBER_1)  &kp NUBS    &kp LS(NUBS)  &kp LS(N0)    &kp LS(N6)
&kp DELETE  &kp RA(MINUS)      &kp LS(N7)     &kp RA(N7)    &kp RA(N0)    &kp RS(RBRC)     &kp LS(MINUS)     &kp LS(N8)  &kp LS(N9)    &kp SLASH     &kp LS(DOT)    &kp RA(Q)
            &kp NUHS           &kp LS(N4)     &kp RA(NUBS)  &kp RA(RBRC)  &kp LS(EQUAL)    &kp LS(N5)        &kp RBRC    &kp LS(N2)    &kp LS(NUHS)  &kp LS(COMMA)
                                              &trans        &to 0         &to 0            &trans            &sl 2       &sl 3
            >;
        };

        numbers {
            bindings = <
         &trans  &trans  &trans  &trans  &trans    &trans  &kp N7        &kp N8        &kp N9        &kp MINUS
&kp TAB  &trans  &trans  &trans  &trans  &trans    &trans  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &trans     &trans
         &trans  &trans  &trans  &trans  &trans    &kp N0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans
                         &trans  &to 0   &to 0     &trans  &trans        &trans
            >;
        };

        navigation_layer {
            bindings = <
        &trans        &mkp MCLK       &mmv MOVE_UP    &mkp LCLK        &mkp RCLK         &trans  &kp PAGE_UP     &kp UP_ARROW    &kp PAGE_DOWN    &kp MINUS
&trans  &bt BT_SEL 1  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_UP      &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans     &trans
        &bt BT_SEL 0  &trans          &trans          &trans           &msc SCRL_DOWN    &trans  &trans          &trans          &trans           &trans
                                      &trans          &to 0            &to 0             &trans  &trans          &trans
            >;
        };

        bt_layer {
            bindings = <
            &bootloader  &none         &none         &none         &bt BT_CLR    &kp X  &out OUT_USB  &out OUT_BLE  &none  &bt BT_CLR_ALL
&bt BT_CLR  &none        &none         &bt BT_PRV    &bt BT_NXT    &none         &none  &none         &none         &none  &none           &none
            &none        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none         &none  &none         &none         &none  &none
                                       &none         &none         &to 0         &none  &none         &none
            >;
        };

        system_layer {
            bindings = <
        &trans  &kt LEFT_ALT  &kp TAB  &trans  &kp K_LOCK    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans        &trans   &trans  &trans        &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans        &trans   &trans  &trans        &trans  &trans  &trans  &trans  &trans
                              &trans   &trans  &trans        &trans  &trans  &trans
            >;
        };
    };
};
