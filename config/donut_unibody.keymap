#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        bootloader {
            bindings = <&bootloader>;
            key-positions = <32 33 34 35 36 37>;
        };
    };

    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 11 12 13 14 15 22 23 24 25 26 32 33 34 35 36 37 10>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <32 33 34 35 36 37 5 6 7 8 9 16 17 18 19 20 21 27 28 29 30 31 35 36 37>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp X     &kp V          &kp L             &kp C                &kp W        &kp K  &kp H                 &kp G      &kp F       &kp Q
&kp ESCAPE  &kp U     &kp I          &kp A             &hml LEFT_CONTROL E  &kp O        &kp S  &hmr RIGHT_CONTROL N  &kp R      &kp T       &kp D  &kp Z
            &kp LBRC  &kp SEMICOLON  &kp SINGLE_QUOTE  &kp P                &kp Y        &kp B  &kp M                 &kp COMMA  &kp PERIOD  &kp J
                                     &mo 3             &kp BACKSPACE        &kp SPACE    &mo 1  &kp ENTER             &mo 2
            >;
        };

        symbol_layer {
            bindings = <
            &kp RA(E)      &kp LS(SLASH)  &kp RA(N8)    &kp RA(N9)    &kp GRAVE        &kp LS(NUMBER_1)  &kp NUBS    &kp LS(NUBS)  &kp LS(N0)    &kp LS(N6)
&kp DELETE  &kp RA(MINUS)  &kp LS(N7)     &kp RA(N7)    &kp RA(N0)    &kp RS(RBRC)     &kp LS(MINUS)     &kp LS(N8)  &kp LS(N9)    &kp SLASH     &kp LS(DOT)    &kp RA(Q)
            &kp NUHS       &kp LS(N4)     &kp RA(NUBS)  &kp RA(RBRC)  &kp LS(EQUAL)    &kp LS(N5)        &kp RBRC    &kp LS(N2)    &kp LS(NUHS)  &kp LS(COMMA)
                                          &trans        &trans        &trans           &trans            &trans      &trans
            >;
        };

        numbers {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans           &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans           &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans
                        &trans  &trans  &trans    &trans           &trans           &trans
            >;
        };

        navigation_layer {
            bindings = <
        &trans  &mkp MCLK       &mmv MOVE_UP    &mkp LCLK        &mkp RCLK    &trans  &kp PAGE_UP     &kp UP_ARROW    &kp PAGE_DOWN    &trans
&trans  &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans       &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans
        &trans  &trans          &trans          &trans           &trans       &trans  &trans          &trans          &trans           &trans
                                &trans          &trans           &trans       &trans  &trans          &trans
            >;
        };

        bt_layer {
            bindings = <
           &bootloader  &none         &none         &kp KP_N2     &kp KP_N2    &kp KP_N2  &kp KP_N2  &kp KP_N2  &kp KP_N2  &kp KP_N2
&kp KP_N2  &none        &none         &bt BT_CLR    &kp KP_N2     &kp KP_N2    &kp KP_N2  &kp KP_N2  &kp KP_N2  &kp KP_N2  &kp KP_N2  &kp KP_N2
           &kp KP_N2    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &kp KP_N2    &kp KP_N2  &kp KP_N2  &kp KP_N2  &kp KP_N2  &kp KP_N2
                                      &kp KP_N2     &kp KP_N2     &kp KP_N2    &kp KP_N2  &kp KP_N2  &kp KP_N2
            >;
        };
    };
};
